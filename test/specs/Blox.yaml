swagger: "2.0"
info:
  title: Blox Client API
  description: API specification for Blox Client API.
  version: 0.0.1
schemes:
  - https
basePath: /
produces:
  - application/json;charset=UTF-8

paths:
  /vouchers/redeem/{voucher}:
    post:
      operationId: "redeemVoucher"
      parameters:
        - in: path
          name: voucher
          description: "the name of the voucher"
          required: true
          type: string
        - in: query
          name: registrationFlow
          description: set to true if we are trying to redeem a registration flow voucher
          required: false
          type: boolean
      responses:
        200:
          description: "Voucher redeemed"
        400:
          description: "Voucher invalid"
        410:
          description: "Voucher already used"
  /vouchers/generate:
    get:
      operationId: "getPersonalVoucher"
      responses:
        200:
          description: "Voucher found"
          schema:
            $ref: "#/definitions/PersonalVoucher"
        404:
          description: "Cannot get active voucher"

  /vouchers/personal:
    get:
      operationId: getPersonalVoucherConfig
      responses:
        200:
          description: Personal Voucher config
          schema:
            $ref: "#/definitions/PersonalVoucherConfigResponse"
        500:
          description: Interenal Server Error

  /vouchers/revenue:
    get:
      operationId: "getPartnerRevenue"
      responses:
        200:
          description: "revenue of the partner"
          schema:
            type: array
            items:
              $ref: "#/definitions/VouchersRevenueResponse"
        400:
          description: "you are not a partner"

  /bankaccounts:
    get:
      operationId: "getBankAccounts"
      parameters:
        - in: query
          name: status
          type: string
      responses:
        200:
          description: "list of bankaccounts from the user"
          schema:
            type: array
            items:
              $ref: "#/definitions/BankAccountResponse"
  /quote:
    post:
      operationId: "createQuote"
      description: "Returns a quote for the requested currency"
      parameters:
        - name: "newQuoteRequest"
          in: "body"
          description: "the quote to be requested."
          schema:
            $ref: "#/definitions/QuoteRequest"
      responses:
        200:
          description: "Quote provided"
          schema:
            $ref: "#/definitions/QuoteResponse"
        503:
          description: "Quotes not available"

  /orders:
    post:
      parameters:
        - name: createOrder
          in: body
          description: the order to be created.
          required: true
          schema:
            $ref: "#/definitions/CreateOrderRequest"
      responses:
        200:
          description: Created Order
          schema:
            $ref: "#/definitions/CreateOrderResponse"
    get:
      operationId: "getOrders"
      parameters:
        - in: query
          name: offset
          type: integer
        - in: query
          name: size
          type: integer
        - in: query
          name: currencyUnit
          type: string
      responses:
        200:
          description: List of user's orders
          schema:
            $ref: "#/definitions/OrdersResponse"

  /orders/tradedCoins:
    get:
      operationId: "getTradedCoins"
      responses:
        200:
          description: List of the all coins the user did a trade in.
          schema:
            $ref: "#/definitions/TradedCoinsResponse"

  /financialOverviews:
    get:
      operationId: "getFinancialOverviews"
      responses:
        200:
          description: List of all financial overviews of the user till the time of request
          schema:
            $ref: "#/definitions/FinancialOverviewsResponse"

  /markets:
    get:
      operationId: "getMarkets"
      responses:
        200:
          description: The list of available markets
          schema:
            $ref: "#/definitions/MarketsResponse"

  /markets/{pair}:
    get:
      operationId: getMarketsPeriods
      parameters:
        - in: path
          name: pair
          description: Trading pair for which the market data should be retrieved. I.e. EUR_BTC
          required: true
          type: string
        - in: query
          name: period
          description: Period over which the pricing data should be retrieved.
          type: string
          enum: ["HOURS", "DAYS", "MONTHS", "YEARS"]
          required: true
        - in: query
          name: periodAmount
          type: integer
          required: true
          description: Amount in the specified period. I.e. 7 days
      responses:
        200:
          description: List of historic pricing data over the specified time for the specified market pair. I.e. 24h data for BTC to EUR.
          schema:
            $ref: "#/definitions/MarketsGraphResponse"
        400:
          description: Time or trading pair incorrectly specified.

  /prices:
    get:
      operationId: "getUnitPrices"
      responses:
        200:
          description: The list of buy and sell unit prices
          schema:
            $ref: "#/definitions/UnitPricesResponse"

  /payments:
    get:
      operationId: getPayments
      responses:
        200:
          description: List of payments for the current users
          schema:
            type: array
            items:
              $ref: "#/definitions/PaymentResult"

  /payments/dropIn/methods:
    post:
      operationId: getDropInPaymentMethods
      description: Retrieve all available payment methods
      parameters:
        - in: body
          name: dropInPaymentMethodsRequest
          description: Get methods request.
          required: true
          schema:
            $ref: "#/definitions/DropInPaymentMethodsRequest"
      responses:
        200:
          description: Payment options retrieved successfully
          schema:
            $ref: "#/definitions/DropInPaymentMethodsResponse"
        400:
          description: Not allowed to retrieve payment methods
        403:
          description: Unauthorized

  /payments/dropIn/pay:
    post:
      operationId: dropInPay
      description: Performs a dropIn payment session with the PSP.
      parameters:
        - in: body
          name: paymentRequest
          required: true
          schema:
            $ref: "#/definitions/DropInPaymentRequest"
      responses:
        200:
          description: Payment finished successfuly
          schema:
            type: array
            items:
              $ref: "#/definitions/DropInPaymentResponseDto"
        400:
          description: Not allowed to retrieve payment methods
        403:
          description: Unauthorized

  /withdrawals:
    post:
      operationId: startWithdrawal
      description: Withdraw fiat from current account.
      parameters:
        - in: body
          name: withdrawalDetails
          description: Details to start withdrawal.
          required: true
          schema:
            $ref: "#/definitions/WithdrawalRequest"
      responses:
        201:
          description: Withdrawal executed successfully.
          schema:
            $ref: "#/definitions/WithdrawalResponse"
        400:
          description: Withdrawal request not valid.
        403:
          description: Unauthorized
        503:
          description: Connection to Bank unavailable.
    get:
      operationId: getWithdrawals
      description: List the user withdrawals
      responses:
        200:
          description: successfully retrieved list of withdrawals
          schema:
            type: array
            items:
              $ref: "#/definitions/WithdrawalResponse"
        503:
          description: Service unavailable

  /ledger:
    get:
      operationId: getLedger
      description: Returns the ledger for user
      responses:
        200:
          description: Ledger retrieved
          schema:
            $ref: "#/definitions/LedgerResponse"

        403:
          description: Unauthorized
        404:
          description: Ledger not found.
        503:
          description: Service unavailable

  /version:
    get:
      responses:
        200:
          description: Identifier of requested Quote
          schema:
            $ref: "#/definitions/VersionResponse"
    post:
      summary: Check version support
      description: Check support for the supplied version
      operationId: checkVersion
      parameters:
        - in: body
          name: checkVersionRequest
          description: Version number of the client.
          required: true
          schema:
            $ref: "#/definitions/CheckVersionRequest"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/CheckVersionResponse"

  /verifications:
    post:
      operationId: sendDoc
      description: Send json data to blox vault
      parameters:
        - in: body
          name: misnapData
          description: json data from misnap
          required: true
          schema:
            $ref: "#/definitions/MisnapData"
      responses:
        200:
          description: Verification result
          schema:
            $ref: "#/definitions/VerificationPostResponse"
    get:
      operationId: getDocs
      description: Retrieve all docs for a user
      responses:
        200:
          description: Verification documents
          schema:
            $ref: "#/definitions/VerificationGetResponse"

  /verifications/restart:
    post:
      operationId: restartVerification
      description: restart verification process and clear previously sent docs
      responses:
        200:
          description: successfully reset the verification records

  /identityProviders:
    get:
      operationId: getIdentityProviders
      responses:
        200:
          description: Identity providers retrieved successfuly
          schema:
            type: array
            items:
              $ref: "#/definitions/IdentityProvider"
        404:
          description: IdentityProviders not found.
        503:
          description: Service unavailable

  /features/{featureName}:
    get:
      operationId: isFeatureEnabled
      parameters:
        - in: path
          name: featureName
          description: "the name of the feature"
          required: true
          type: string
      responses:
        200:
          description: check if this feature is enabled or not
          schema:
            $ref: "#/definitions/FeatureResponse"
        500:
          description: internal server error

  /account/disable:
    put:
      operationId: disableAccount
      description: Disables the account for the user
      responses:
        200:
          description: OK
        400:
          description: bad request
        500:
          description: internal server error

  /user-preferences:
    get:
      operationId: getUserPreferences
      description: Gets the user preferences
      responses:
        200:
          description: User preferences
          schema:
            type: object
    post:
      operationId: updateUserPreferences
      description: Stores the user preferences
      parameters:
        - name: "userPreferences"
          in: "body"
          description: "the preferences to be stored (as json)"
          schema:
            type: object
      responses:
        200:
          description: OK
        400:
          description: bad request
        500:
          description: internal server error
definitions:
  Amount:
    type: object
    description: Describes the amount for the payment to be made.
    properties:
      currency:
        type: string
        description: Currency in which the payment will be made.
        example: EUR
      value:
        type: number
        description: The amount of units in the currency for which the payment will be made.
        example: 13.37
    required:
      - value
      - currency

  Currency:
    type: object
    required:
      - unit
    properties:
      unit:
        type: string
      amount:
        type: number
        minimum: 0
        exclusiveMinimum: true
        example: 100

  QuoteCurrency:
    type: object
    properties:
      currency:
        $ref: "#/definitions/Currency"
      type:
        type: string
        enum: ["PERCENTAGE", "AMOUNT"]

  OrderStatus:
    type: string
    enum: ["PENDING", "SUCCESS", "FAILED"]

  QuoteRequest:
    type: object
    required:
      - offer
    properties:
      offer:
        $ref: "#/definitions/QuoteCurrency"
      receive: #deprecated
        type: string
      newReceive:
        $ref: "#/definitions/QuoteCurrency"

  QuoteResponse:
    type: object
    properties:
      quoteId:
        type: string
      expires:
        type: number
      fee:
        $ref: "#/definitions/Fee"
      offer:
        $ref: "#/definitions/Currency"
      receive:
        $ref: "#/definitions/Currency"
      rightToLeft:
        type: boolean
      unitPrice:
        type: number
      slippage:
        type: number
      marketPrice:
        type: number

  VersionResponse:
    type: object
    properties:
      version:
        type: string

  OrdersResponse:
    type: array
    items:
      $ref: "#/definitions/CreateOrderResponse"

  CreateOrderResponse:
    type: object
    properties:
      orderId:
        type: string
        description: The Id of the order
      quoteFee:
        $ref: "#/definitions/Fee"
      buyAmount:
        $ref: "#/definitions/Currency"
      sellAmount:
        $ref: "#/definitions/Currency"
      status:
        $ref: "#/definitions/OrderStatus"
      timeStamp:
        type: string

  CreateOrderRequest:
    type: object
    required:
      - quoteId
      - buyAmount
      - sellAmount
    properties:
      userId:
        type: string
        description: Identifier of the quote for this order
      quoteId:
        type: string
        description: Identifier of the quote for this order
      buyAmount:
        $ref: "#/definitions/Currency"
      sellAmount:
        $ref: "#/definitions/Currency"

  TradedCoinsResponse:
    type: array
    items:
      $ref: "#/definitions/Coin"

  Coin:
    type: object
    properties:
      shortName:
        example: BTC
        type: string
        description: The 3 letter shortname for the currency.

  MarketsResponse:
    type: array
    items:
      $ref: "#/definitions/Market"

  FinancialOverviewsResponse:
    type: array
    items:
      $ref: "#/definitions/FinancialOverview"

  FinancialOverview:
    type: object
    properties:
      year:
        example: 2022
        type: integer
        description: The financial overview year
      totalAssetValueInEuro:
        type: number
        description: Total asset value in Euro for the financial overview year
        example: 1000.0023
      assetOverviews:
        type: array
        items:
          $ref: "#/definitions/AssetOverview"

  AssetOverview:
    type: object
    properties:
      assetSymbol:
        example: BTC
        type: string
        description: Asset symbol
      assetBalance:
        example: 0.000345
        type: number
        description: Net balance of the asset for the financial overview year
      assetValueInEuro:
        example: 1000.34006
        type: number
        description: Total asset value in Euro for the net balance of the asset for the financial overview year

  Market:
    type: object
    properties:
      shortName:
        example: BTC
        type: string
        description: The 3 letter shortname for the currency of the market.
      name:
        type: string
        example: Bitcoin
        description: The unabreviated name of the market
      priceChangePercentage:
        type: number
        description: Price change over the last 24h
        example: 0.75
      price:
        $ref: "#/definitions/Currency"
      sellPrice:
        $ref: "#/definitions/Currency"
      totalVolume:
        example: 99
        type: integer
        format: int64
      marketCapRank:
        example: 1
        type: integer
        format: int64

  UnitPricesResponse:
    type: array
    items:
      $ref: "#/definitions/UnitPrice"

  UnitPrice:
    type: object
    properties:
      targetCurrency:
        example: BTC
        type: string
        description: The 3 letter shortname for the currency of the market.
      baseCurrency:
        type: string
        example: EUR
        description: The 3 letter shortname for the base currency
      buyPrice:
        type: number
        description: price to pay in base currency (EUR) when buying crypto unit, including fee
        example: 7000
      sellPrice:
        type: number
        description: Received price in base currency (EUR) when selling crypto unit, including fee
        example: 6990

  MarketsGraphResponse:
    type: object
    properties:
      from:
        type: string
      to:
        type: string
      timeline:
        type: array
        items:
          $ref: "#/definitions/MarketGraph"

  MarketGraph:
    type: object
    properties:
      quantity:
        type: number
        description: The amount of the currency
      timestamp:
        type: string
        description: ISO timestamp for the market item.

  PaymentResult:
    type: object
    properties:
      id:
        type: string
        description: Payment ID
      status:
        type: string
        description: Payment result status.
        example: Authorised
        enum:
          [
            Authorised,
            Refused,
            Created,
            Received,
            Cancelled,
            Pending,
            OFFER_CLOSED,
            Error,
            ValidationStarted,
            Unknown,
            SessionCreated,
            SessionFailed,
            RedirectShopper,
            ToppedUp,
            Ready_For_Refund,
            Failed_To_Send_Refund_Request,
            Sent_For_Refund,
            Refund_Request_Rejected,
            Refund_Failed,
            Refunded,
          ]
      bankAccountStatus:
        type: string
        description: Status of the bank account verification
        enum: [PENDING, UNVERIFIED, VERIFIED, REJECTED]
      amount:
        $ref: "#/definitions/Currency"
      bankAccount:
        type: string
      bankAccountName:
        type: string
      timeStamp:
        type: string
      paymentMethod:
        type: string
        description: Payment method name returned by psp
        example: ideal
      isSuspicious:
        type: boolean
        description: True if payment is marked as suspicious by compliance
      suspiciousDescription:
        type: string
        description: Description of why this transaction was marked as suspicious.

  DropInPaymentMethodsResponse:
    type: object
    properties:
      groups:
        description: Groups of payment methods.
        type: array
        items:
          $ref: "#/definitions/PaymentMethodsGroup"
      paymentMethods:
        description: Detailed list of payment methods required to generate payment forms.
        type: array
        items:
          $ref: "#/definitions/PaymentMethod"
      storedPaymentMethods:
        description: List of all stored payment methods.
        type: array
        items:
          $ref: "#/definitions/StoredPaymentMethod"

  PaymentMethodsGroup:
    type: object
    properties:
      name:
        description: The human-readable name of this group.
        example: Credit Card
        type: string
      types:
        description: The types of payment methods that belong in this group.
        example: ["mc", "visa"]
        type: array
        items:
          type: string
    required:
      - name
      - types

  PaymentMethod:
    type: object
    properties:
      name:
        type: string
        description: The displayable name of this payment method.
        example: iDEAL
      supportsRecurring:
        type: boolean
        description: Indicates whether this payment method supports tokenization or not.
        example: true
      type:
        type: string
        description: The unique payment method code.
        example: ideal
      brands:
        type: array
        items:
          type: string
        description: List of possible brands.
        example: ["mc", "visa"]
      details:
        type: array
        items:
          $ref: "#/definitions/InputDetail"
      amount:
        type: number
        format: double
        description: the amount with a possible fee added.
    required:
      - amount

  InputDetail:
    type: object
    properties:
      key:
        type: string
        description: The value to provide in the result.
        example: issuer
      type:
        type: string
        description: The type of the required input.
        example: select
      optional:
        type: boolean
        description: True if this input value is optional.
        example: true
      items:
        type: array
        items:
          $ref: "#/definitions/Item"

  Item:
    type: object
    properties:
      id:
        type: string
        description: The value to provide in the result.
      name:
        type: string
        description: The display name.
    required:
      - id

  StoredPaymentMethod:
    type: object
    properties:
      id:
        type: string
        description: A unique identifier of this stored payment method.
      name:
        type: string
        description: The display name of the stored payment method.
        example: MasterCard
      type:
        type: string
        description: The type of payment method.
        example: scheme
      brand:
        type: string
        description: The brand of the card.
        example: mc
      expiryMonth:
        type: string
        description: The month the card expires.
        example: 03
      expiryYear:
        type: string
        description: The year the card expires.
        example: 2030
      lastFour:
        type: string
        description: The last four digits of the PAN.
        example: 0010
      holderName:
        type: string
        description: The unique payment method code.
        example: T. Test
      shopperEmail:
        type: string
        description: The shopper’s email address.
        example: test@test.nl
      supportedShopperInteractions:
        type: array
        items:
          type: string
        description: The supported shopper interactions for this stored payment method.
        example: ["Ecommerce", "ContAuth"]
      amount:
        type: number
        format: double
        description: the amount with a possible fee added.
    required:
      - amount

  DropInPaymentMethodsRequest:
    type: object
    properties:
      amount:
        type: object
        $ref: "#/definitions/Amount"
        description: Amount to deposit.
      countryCode:
        type: string
        description: Country to load payment methods for.
        example: NL
      channel:
        type: string
        enum: [iOS, Android, Web]
        description: Platform in which the payment is initialized.
        example: iOS
      shopperLocale:
        type: string
        description: Locale of the user. Used for internationalization.
        example: nl_NL

  DropInPaymentRequest:
    type: object
    properties:
      amount:
        type: object
        $ref: "#/definitions/Amount"
      amountBeforeFee:
        type: object
        $ref: "#/definitions/Amount"
      paymentMethod:
        type: object
        $ref: "#/definitions/DropInPaymentRequestInfo"
      returnUrl:
        type: string
        example: "weareblox://vault/top-up/result"
      reference:
        type: string
        description: FE generated reference for this payment request
      countryCode:
        type: string
      channel:
        type: string
      storePaymentMethod:
        type: boolean
        default: false
        description: whether the payment details should be stored for use in subsequent payments.
    required:
      - amount
      - paymentMethod

  DropInPaymentRequestInfo:
    type: object
    properties:
      storedPaymentMethodId:
        type: string
        description: use a stored payment method with id; if provided only the cvc needs to be send.
        example:
      type:
        type: string
      issuer:
        type: string
        description: in case of ideal
      encryptedCardNumber:
        type: string
      encryptedExpiryMonth:
        type: string
      encryptedExpiryYear:
        type: string
      encryptedSecurityCode:
        type: string
      holderName:
        type: string
      sepa.ownerName:
        type: string
      sepa.ibanNumber:
        type: string
      applePayToken:
        type: string

  DropInPaymentResponseDto:
    type: object
    properties:
      additionalData:
        type: object
        additionalProperties:
          type: string
      details:
        type: array
        items:
          $ref: "#/definitions/DropInPaymentMethodDetail"
      paymentData:
        type: string
      pspReference:
        type: string
      refusalReason:
        type: string
      refusalReasonCode:
        type: string
      resultCode:
        type: string
      merchantReference:
        type: string
      serviceError:
        type: string
  #      fraudResult:
  #      redirect:
  #      action:
  #      amount:

  DropInPaymentMethodDetail:
    type: object
    properties:
      key:
        type: string
      type:
        type: string
      optional:
        type: boolean
      items:
        type: array
        items:
          $ref: "#/definitions/DropInPaymentMethodDetailItem"

  DropInPaymentMethodDetailItem:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
    required:
      - id

  WithdrawalRequest:
    type: object
    description: Payment withdrawal from user account.
    properties:
      amount:
        type: object
        $ref: "#/definitions/Amount"
      bankAccountId:
        type: string
        description: Identifier of the bank account.
    required:
      - amount
      - bankAccountId

  WithdrawalResponse:
    type: object
    description: Payment withdrawal response.
    properties:
      id:
        type: string
      amount:
        type: object
        $ref: "#/definitions/Amount"
      bankAccount:
        type: string
      status:
        type: string
        enum: ["PENDING", "REFUSED", "FAILED", "COMPLETED"]
      timeStamp:
        type: string
      isSuspicious:
        type: boolean
        description: True if payment is marked as suspicious by compliance
      suspiciousDescription:
        type: string
        description: Description of why this transaction was marked as suspicious.

  LedgerResponse:
    type: object
    properties:
      credit:
        type: number
      assets:
        type: array
        items:
          $ref: "#/definitions/LedgerAsset"
      positions:
        type: number
      total:
        type: number
      verified:
        type: boolean
      unverifiedLimit:
        type: number
      dailyLimit:
        type: number
      monthlyLimit:
        type: number
      allTimeLimit:
        type: number
      unverifiedAmount:
        type: number
      dailyAmount:
        type: number
      monthlyAmount:
        type: number
      allTimeAmount:
        type: number
      limitLevel:
        type: string
        enum: ["DEFAULT", "LEVEL1", "LEVEL2", "LEVEL3", "LEVEL4", "LEVEL5"]
      totals:
        $ref: "#/definitions/LedgerTotals"

  LedgerAsset:
    type: object
    properties:
      shortName:
        type: string
      name:
        type: string
      balance:
        type: number
      sellPrice:
        type: number

  LedgerTotals:
    type: object
    properties:
      amountWithdrawn:
        type: number

  MisnapData:
    type: object
    properties:
      docType:
        type: string
        enum:
          [
            "PASSPORT",
            "ID_CARD_FRONT",
            "ID_CARD_BACK",
            "DRIVER_LICENSE_FRONT",
            "DRIVER_LICENSE_BACK",
            "SELFIE",
          ]
        description: Type of the document
      parts:
        type: integer
        description: total number of document parts
      image:
        type: string
        description: image base64encoded data
    additionalProperties: true
    required:
      - docType
      - image
      - parts

  VerificationPostResponse:
    type: object
    properties:
      result:
        type: string
        description: Send doc result.
        example: SUCCESS
        enum: [SUCCESS, FAILED]

  VerificationGetResponse:
    type: object
    properties:
      status:
        type: string
        enum:
          [
            COMPLETED,
            REJECTED,
            VALIDATION_FAILED,
            PENDING,
            PROCESSING,
            COMPLETEDWITHWARNINGS,
            COMPLETEDWITHREPORTINGERRORS,
          ]
      docs:
        type: array
        items:
          $ref: "#/definitions/VerificationDoc"
      retriesLeft:
        type: number
        description: number of times user can still retries mitek process
      validationResults:
        type: object
        $ref: "#/definitions/ValidationResults"
        description: validation results, if any
      rejectedReasons:
        type: string
      timestamp:
        type: string
    required:
      - status
      - docs
      - retriesLeft

  VerificationDoc:
    type: object
    properties:
      docType:
        type: string

  BankAccountResponse:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      iban:
        type: string
      status:
        type: string
        enum: [PENDING, UNVERIFIED, VERIFIED, REJECTED]
      allowWithdrawal:
        type: boolean
      creationTimeStamp:
        type: string
      statusChangeTimeStamp:
        type: string

  CheckVersionRequest:
    type: object
    required:
      - version
    properties:
      version:
        type: string
        description: Client version number
        example: 1.0.0

  CheckVersionResponse:
    description: Indicates whether a client is required or recommended to update. Only one of these cases can be applicable.
    type: object
    required:
      - updateRequired
      - updateRecommended
    properties:
      updateRequired:
        type: boolean
        example: true
      updateRecommended:
        type: boolean
        example: false

  ValidationResults:
    type: object
    properties:
      validDob:
        type: boolean
        description: was the dob valid after verification
      validNationality:
        type: boolean
        description: was the nationality valid after verification
      validExpiryDate:
        type: boolean
        description: was the expiration date valid after verification

  PersonalVoucher:
    type: object
    properties:
      name:
        type: string
        description: voucher name
        example: ABBF-238B-86E3
      amount:
        $ref: "#/definitions/Currency"
      currentUsage:
        type: integer
        description: current number of time the voucher has been redeemed
        example: 2
      maxUsage:
        type: integer
        description: max number of time the voucher can be redeemed
        example: 3

  PersonalVoucherConfigResponse:
    type: object
    properties:
      amount:
        $ref: "#/definitions/Currency"
      bonus:
        $ref: "#/definitions/Currency"
      maxUsage:
        type: integer
        description: maximum number of time the voucher can be redeemed
        example: 500
      enabled:
        type: boolean
      fee:
        type: number
        example: 10
        description: percentage of fee that  goes to partner
      topUpTime:
        type: string
        enum: ["IMMEDIATE", "FIRST_DEPOSIT", "VERIFICATION_COMPLETED"]
      level:
        type: string
        example: default

  VouchersRevenueResponse:
    type: object
    properties:
      revenue:
        type: number
      date:
        type: string

  IdentityProvider:
    type: object
    properties:
      id:
        type: string
        description: id of the provider
      name:
        type: string
        description: name of the provider

  FeatureResponse:
    type: object
    properties:
      enabled:
        type: boolean
        description: true if feature is enabled, otherwise false

  Fee:
    description: A fee that is listed in a quote or applied to a transaction
    type: object
    properties:
      unit:
        type: string
        description: The unit of the fee, currently limited to "PERCENTAGE"
      amount:
        type: number
        description: The amount that was applied. If in PERCENTAGE
        minimum: 0
        example: 0.5
